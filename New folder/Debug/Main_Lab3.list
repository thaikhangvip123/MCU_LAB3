
Main_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd4  08002bd4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd4  08002bd4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd4  08002bd4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000003c  08002c18  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002c18  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dfc  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4e  00000000  00000000  00029e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170c0  00000000  00000000  0002d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c974  00000000  00000000  00044160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082584  00000000  00000000  00050ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000d30ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b8c 	.word	0x08002b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002b8c 	.word	0x08002b8c

0800014c <initButton>:
int TimeOutForKeyPress[BUTTON_NUMS];
int button_pressed[BUTTON_NUMS];
int button_long_pressed[BUTTON_NUMS];
int button_flag[BUTTON_NUMS];

void initButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUTTON_NUMS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e02b      	b.n	80001b0 <initButton+0x64>
		KeyReg0[i] = NORMAL_STATE;
 8000158:	4a1a      	ldr	r2, [pc, #104]	; (80001c4 <initButton+0x78>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <initButton+0x7c>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800016c:	4a17      	ldr	r2, [pc, #92]	; (80001cc <initButton+0x80>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE;
 8000176:	4a16      	ldr	r2, [pc, #88]	; (80001d0 <initButton+0x84>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimeOutForKeyPress[i] = 500;
 8000180:	4a14      	ldr	r2, [pc, #80]	; (80001d4 <initButton+0x88>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000188:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_pressed[i] = 0;
 800018c:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <initButton+0x8c>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2100      	movs	r1, #0
 8000192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_long_pressed[i] = 0;
 8000196:	4a11      	ldr	r2, [pc, #68]	; (80001dc <initButton+0x90>)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2100      	movs	r1, #0
 800019c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 80001a0:	4a0f      	ldr	r2, [pc, #60]	; (80001e0 <initButton+0x94>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2100      	movs	r1, #0
 80001a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < BUTTON_NUMS; i++) {
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3301      	adds	r3, #1
 80001ae:	607b      	str	r3, [r7, #4]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b09      	cmp	r3, #9
 80001b4:	ddd0      	ble.n	8000158 <initButton+0xc>
	}
}
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	200000c0 	.word	0x200000c0
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	20000188 	.word	0x20000188
 80001d0:	20000098 	.word	0x20000098
 80001d4:	20000110 	.word	0x20000110
 80001d8:	20000160 	.word	0x20000160
 80001dc:	200001b0 	.word	0x200001b0
 80001e0:	20000138 	.word	0x20000138

080001e4 <isButtonPressed>:
int isButtonPressed(int index){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 80001ec:	4a09      	ldr	r2, [pc, #36]	; (8000214 <isButtonPressed+0x30>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d106      	bne.n	8000206 <isButtonPressed+0x22>
		button_flag[index] = 0;
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <isButtonPressed+0x30>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2100      	movs	r1, #0
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000202:	2301      	movs	r3, #1
 8000204:	e000      	b.n	8000208 <isButtonPressed+0x24>
	}
	return 0;
 8000206:	2300      	movs	r3, #0
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000138 	.word	0x20000138

08000218 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUTTON_NUMS; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e012      	b.n	800024a <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 8000224:	4a49      	ldr	r2, [pc, #292]	; (800034c <getKeyInput+0x134>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4948      	ldr	r1, [pc, #288]	; (8000350 <getKeyInput+0x138>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000234:	4a47      	ldr	r2, [pc, #284]	; (8000354 <getKeyInput+0x13c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4943      	ldr	r1, [pc, #268]	; (800034c <getKeyInput+0x134>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < BUTTON_NUMS; i++) {
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b09      	cmp	r3, #9
 800024e:	dde9      	ble.n	8000224 <getKeyInput+0xc>
		// Add your key
	}
		KeyReg0[0] = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 8000250:	2102      	movs	r1, #2
 8000252:	4841      	ldr	r0, [pc, #260]	; (8000358 <getKeyInput+0x140>)
 8000254:	f001 fc6e 	bl	8001b34 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4b3d      	ldr	r3, [pc, #244]	; (8000354 <getKeyInput+0x13c>)
 800025e:	601a      	str	r2, [r3, #0]
		KeyReg0[1] = HAL_GPIO_ReadPin(MODIFY_GPIO_Port, MODIFY_Pin);
 8000260:	2104      	movs	r1, #4
 8000262:	483d      	ldr	r0, [pc, #244]	; (8000358 <getKeyInput+0x140>)
 8000264:	f001 fc66 	bl	8001b34 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	4b39      	ldr	r3, [pc, #228]	; (8000354 <getKeyInput+0x13c>)
 800026e:	605a      	str	r2, [r3, #4]
		KeyReg0[2] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 8000270:	2108      	movs	r1, #8
 8000272:	4839      	ldr	r0, [pc, #228]	; (8000358 <getKeyInput+0x140>)
 8000274:	f001 fc5e 	bl	8001b34 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	4b35      	ldr	r3, [pc, #212]	; (8000354 <getKeyInput+0x13c>)
 800027e:	609a      	str	r2, [r3, #8]
//				break;
//			case 2:
//				KeyReg0[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
//				break;
//		}
	for(int i = 0; i < BUTTON_NUMS; i++) {
 8000280:	2300      	movs	r3, #0
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	e05a      	b.n	800033c <getKeyInput+0x124>
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000286:	4a31      	ldr	r2, [pc, #196]	; (800034c <getKeyInput+0x134>)
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028e:	4931      	ldr	r1, [pc, #196]	; (8000354 <getKeyInput+0x13c>)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000296:	429a      	cmp	r2, r3
 8000298:	d14d      	bne.n	8000336 <getKeyInput+0x11e>
 800029a:	4a2c      	ldr	r2, [pc, #176]	; (800034c <getKeyInput+0x134>)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a2:	492b      	ldr	r1, [pc, #172]	; (8000350 <getKeyInput+0x138>)
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d143      	bne.n	8000336 <getKeyInput+0x11e>
			if (KeyReg2[i] != KeyReg3[i]){
 80002ae:	4a28      	ldr	r2, [pc, #160]	; (8000350 <getKeyInput+0x138>)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b6:	4929      	ldr	r1, [pc, #164]	; (800035c <getKeyInput+0x144>)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d019      	beq.n	80002f6 <getKeyInput+0xde>
				KeyReg3[i] = KeyReg2[i];
 80002c2:	4a23      	ldr	r2, [pc, #140]	; (8000350 <getKeyInput+0x138>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ca:	4924      	ldr	r1, [pc, #144]	; (800035c <getKeyInput+0x144>)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 80002d2:	4a22      	ldr	r2, [pc, #136]	; (800035c <getKeyInput+0x144>)
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d12b      	bne.n	8000336 <getKeyInput+0x11e>
					TimeOutForKeyPress[i] = 500;
 80002de:	4a20      	ldr	r2, [pc, #128]	; (8000360 <getKeyInput+0x148>)
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					//subKeyProcess();
					button_flag[i] = 1;
 80002ea:	4a1e      	ldr	r2, [pc, #120]	; (8000364 <getKeyInput+0x14c>)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	2101      	movs	r1, #1
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f4:	e01f      	b.n	8000336 <getKeyInput+0x11e>
				}
			} else{
				TimeOutForKeyPress[i] --;
 80002f6:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <getKeyInput+0x148>)
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	1e5a      	subs	r2, r3, #1
 8000300:	4917      	ldr	r1, [pc, #92]	; (8000360 <getKeyInput+0x148>)
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000308:	4a15      	ldr	r2, [pc, #84]	; (8000360 <getKeyInput+0x148>)
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d110      	bne.n	8000336 <getKeyInput+0x11e>
					TimeOutForKeyPress[i] = 500;
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <getKeyInput+0x148>)
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800031c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED_STATE){
 8000320:	4a0e      	ldr	r2, [pc, #56]	; (800035c <getKeyInput+0x144>)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d104      	bne.n	8000336 <getKeyInput+0x11e>
						//subKeyProcess();
						button_flag[i] = 1;
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <getKeyInput+0x14c>)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2101      	movs	r1, #1
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < BUTTON_NUMS; i++) {
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b09      	cmp	r3, #9
 8000340:	dda1      	ble.n	8000286 <getKeyInput+0x6e>
					}
				}
			}
		}
	}
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200000e8 	.word	0x200000e8
 8000350:	20000188 	.word	0x20000188
 8000354:	200000c0 	.word	0x200000c0
 8000358:	40010800 	.word	0x40010800
 800035c:	20000098 	.word	0x20000098
 8000360:	20000110 	.word	0x20000110
 8000364:	20000138 	.word	0x20000138

08000368 <fsm_automatic_run>:
#include "fsm_automatic.h"

int cdX = 0;
int cdY = 0;

void fsm_automatic_run() {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	switch(status) {
 800036c:	4b91      	ldr	r3, [pc, #580]	; (80005b4 <fsm_automatic_run+0x24c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3b01      	subs	r3, #1
 8000372:	2b0d      	cmp	r3, #13
 8000374:	f200 8179 	bhi.w	800066a <fsm_automatic_run+0x302>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <fsm_automatic_run+0x18>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	080003b9 	.word	0x080003b9
 8000384:	0800066b 	.word	0x0800066b
 8000388:	0800066b 	.word	0x0800066b
 800038c:	0800066b 	.word	0x0800066b
 8000390:	0800066b 	.word	0x0800066b
 8000394:	0800066b 	.word	0x0800066b
 8000398:	0800066b 	.word	0x0800066b
 800039c:	0800066b 	.word	0x0800066b
 80003a0:	0800066b 	.word	0x0800066b
 80003a4:	0800066b 	.word	0x0800066b
 80003a8:	08000403 	.word	0x08000403
 80003ac:	08000491 	.word	0x08000491
 80003b0:	08000529 	.word	0x08000529
 80003b4:	080005d5 	.word	0x080005d5
		case AUTO:
			if (1) {
				status = G_R;
 80003b8:	4b7e      	ldr	r3, [pc, #504]	; (80005b4 <fsm_automatic_run+0x24c>)
 80003ba:	220b      	movs	r2, #11
 80003bc:	601a      	str	r2, [r3, #0]
				cdX = timerGreen - 1;
 80003be:	4b7e      	ldr	r3, [pc, #504]	; (80005b8 <fsm_automatic_run+0x250>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	4a7d      	ldr	r2, [pc, #500]	; (80005bc <fsm_automatic_run+0x254>)
 80003c6:	6013      	str	r3, [r2, #0]
				cdY = timerRed - 1;
 80003c8:	4b7d      	ldr	r3, [pc, #500]	; (80005c0 <fsm_automatic_run+0x258>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	4a7d      	ldr	r2, [pc, #500]	; (80005c4 <fsm_automatic_run+0x25c>)
 80003d0:	6013      	str	r3, [r2, #0]
				updateClockBuffer2(cdX);
 80003d2:	4b7a      	ldr	r3, [pc, #488]	; (80005bc <fsm_automatic_run+0x254>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fc04 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(cdY);
 80003dc:	4b79      	ldr	r3, [pc, #484]	; (80005c4 <fsm_automatic_run+0x25c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fbdb 	bl	8000b9c <updateClockBuffer1>
				setTimer1(timerGreen * 1000); // Timer 1
 80003e6:	4b74      	ldr	r3, [pc, #464]	; (80005b8 <fsm_automatic_run+0x250>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ee:	fb02 f303 	mul.w	r3, r2, r3
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fd46 	bl	8000e84 <setTimer1>
				setTimer2(1000);
 80003f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fc:	f000 fd5e 	bl	8000ebc <setTimer2>
			}
			break;
 8000400:	e13c      	b.n	800067c <fsm_automatic_run+0x314>
		case G_R:
			trafficG_R();
 8000402:	f000 fec3 	bl	800118c <trafficG_R>
			if (timer1_flag == 1) {
 8000406:	4b70      	ldr	r3, [pc, #448]	; (80005c8 <fsm_automatic_run+0x260>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d110      	bne.n	8000430 <fsm_automatic_run+0xc8>
				status = Y_R;
 800040e:	4b69      	ldr	r3, [pc, #420]	; (80005b4 <fsm_automatic_run+0x24c>)
 8000410:	220c      	movs	r2, #12
 8000412:	601a      	str	r2, [r3, #0]
				setTimer1(timerYellow * 1000); // Timer 1
 8000414:	4b6d      	ldr	r3, [pc, #436]	; (80005cc <fsm_automatic_run+0x264>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fd2f 	bl	8000e84 <setTimer1>
				cdX = timerYellow - 1;
 8000426:	4b69      	ldr	r3, [pc, #420]	; (80005cc <fsm_automatic_run+0x264>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	4a63      	ldr	r2, [pc, #396]	; (80005bc <fsm_automatic_run+0x254>)
 800042e:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1) {
 8000430:	4b67      	ldr	r3, [pc, #412]	; (80005d0 <fsm_automatic_run+0x268>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d117      	bne.n	8000468 <fsm_automatic_run+0x100>
				// UPDATE DISPLAY
				updateClockBuffer2(cdX);
 8000438:	4b60      	ldr	r3, [pc, #384]	; (80005bc <fsm_automatic_run+0x254>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fbd1 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(cdY);
 8000442:	4b60      	ldr	r3, [pc, #384]	; (80005c4 <fsm_automatic_run+0x25c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fba8 	bl	8000b9c <updateClockBuffer1>
				cdX--;
 800044c:	4b5b      	ldr	r3, [pc, #364]	; (80005bc <fsm_automatic_run+0x254>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a5a      	ldr	r2, [pc, #360]	; (80005bc <fsm_automatic_run+0x254>)
 8000454:	6013      	str	r3, [r2, #0]
				cdY--;
 8000456:	4b5b      	ldr	r3, [pc, #364]	; (80005c4 <fsm_automatic_run+0x25c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a59      	ldr	r2, [pc, #356]	; (80005c4 <fsm_automatic_run+0x25c>)
 800045e:	6013      	str	r3, [r2, #0]
				setTimer2(1000); // Timer 2
 8000460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000464:	f000 fd2a 	bl	8000ebc <setTimer2>
			}
			if (isButtonPressed(0)) {
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff febb 	bl	80001e4 <isButtonPressed>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	f000 80fc 	beq.w	800066e <fsm_automatic_run+0x306>
			// Check button1_flag == 1, then reset button1_flag = 0
				setTimer4(250);
 8000476:	20fa      	movs	r0, #250	; 0xfa
 8000478:	f000 fd58 	bl	8000f2c <setTimer4>
				status = MANUAL;
 800047c:	4b4d      	ldr	r3, [pc, #308]	; (80005b4 <fsm_automatic_run+0x24c>)
 800047e:	2202      	movs	r2, #2
 8000480:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 8000482:	f242 7010 	movw	r0, #10000	; 0x2710
 8000486:	f000 fd35 	bl	8000ef4 <setTimer3>
				clearLed();
 800048a:	f001 f81d 	bl	80014c8 <clearLed>
			}
			break;
 800048e:	e0ee      	b.n	800066e <fsm_automatic_run+0x306>
		case Y_R:
			trafficY_R();
 8000490:	f000 fea2 	bl	80011d8 <trafficY_R>
			if (timer1_flag == 1) {
 8000494:	4b4c      	ldr	r3, [pc, #304]	; (80005c8 <fsm_automatic_run+0x260>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d115      	bne.n	80004c8 <fsm_automatic_run+0x160>
				status = R_G;
 800049c:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <fsm_automatic_run+0x24c>)
 800049e:	220d      	movs	r2, #13
 80004a0:	601a      	str	r2, [r3, #0]
				setTimer1(timerGreen * 1000); // Timer 1
 80004a2:	4b45      	ldr	r3, [pc, #276]	; (80005b8 <fsm_automatic_run+0x250>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004aa:	fb02 f303 	mul.w	r3, r2, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fce8 	bl	8000e84 <setTimer1>
				cdX = timerRed - 1;
 80004b4:	4b42      	ldr	r3, [pc, #264]	; (80005c0 <fsm_automatic_run+0x258>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	4a40      	ldr	r2, [pc, #256]	; (80005bc <fsm_automatic_run+0x254>)
 80004bc:	6013      	str	r3, [r2, #0]
				cdY = timerGreen - 1;
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <fsm_automatic_run+0x250>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a3f      	ldr	r2, [pc, #252]	; (80005c4 <fsm_automatic_run+0x25c>)
 80004c6:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1) {
 80004c8:	4b41      	ldr	r3, [pc, #260]	; (80005d0 <fsm_automatic_run+0x268>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d117      	bne.n	8000500 <fsm_automatic_run+0x198>
				// UPDATE DISPLAY
				updateClockBuffer2(cdX);
 80004d0:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <fsm_automatic_run+0x254>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fb85 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(cdY);
 80004da:	4b3a      	ldr	r3, [pc, #232]	; (80005c4 <fsm_automatic_run+0x25c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fb5c 	bl	8000b9c <updateClockBuffer1>
				cdX--;
 80004e4:	4b35      	ldr	r3, [pc, #212]	; (80005bc <fsm_automatic_run+0x254>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	4a34      	ldr	r2, [pc, #208]	; (80005bc <fsm_automatic_run+0x254>)
 80004ec:	6013      	str	r3, [r2, #0]
				cdY--;
 80004ee:	4b35      	ldr	r3, [pc, #212]	; (80005c4 <fsm_automatic_run+0x25c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <fsm_automatic_run+0x25c>)
 80004f6:	6013      	str	r3, [r2, #0]
				setTimer2(1000); // Timer 2
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fcde 	bl	8000ebc <setTimer2>
			}
			if (isButtonPressed(0)) {
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fe6f 	bl	80001e4 <isButtonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	f000 80b2 	beq.w	8000672 <fsm_automatic_run+0x30a>
			// Check button1_flag == 1, then reset button1_flag = 0
				setTimer4(250);
 800050e:	20fa      	movs	r0, #250	; 0xfa
 8000510:	f000 fd0c 	bl	8000f2c <setTimer4>
				status = MANUAL;
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <fsm_automatic_run+0x24c>)
 8000516:	2202      	movs	r2, #2
 8000518:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 800051a:	f242 7010 	movw	r0, #10000	; 0x2710
 800051e:	f000 fce9 	bl	8000ef4 <setTimer3>
				clearLed();
 8000522:	f000 ffd1 	bl	80014c8 <clearLed>
			}
			break;
 8000526:	e0a4      	b.n	8000672 <fsm_automatic_run+0x30a>
		case R_G:
			trafficR_G();
 8000528:	f000 fe7c 	bl	8001224 <trafficR_G>
			if (timer1_flag == 1) {
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <fsm_automatic_run+0x260>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d110      	bne.n	8000556 <fsm_automatic_run+0x1ee>
				status = R_Y;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <fsm_automatic_run+0x24c>)
 8000536:	220e      	movs	r2, #14
 8000538:	601a      	str	r2, [r3, #0]
				setTimer1(timerYellow * 1000); // Timer 1
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <fsm_automatic_run+0x264>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000542:	fb02 f303 	mul.w	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fc9c 	bl	8000e84 <setTimer1>
				cdY = timerYellow - 1;
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <fsm_automatic_run+0x264>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <fsm_automatic_run+0x25c>)
 8000554:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1) {
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <fsm_automatic_run+0x268>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d117      	bne.n	800058e <fsm_automatic_run+0x226>
				// UPDATE DISPLAY
				updateClockBuffer2(cdX);
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <fsm_automatic_run+0x254>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fb3e 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(cdY);
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <fsm_automatic_run+0x25c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fb15 	bl	8000b9c <updateClockBuffer1>
				cdX--;
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <fsm_automatic_run+0x254>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <fsm_automatic_run+0x254>)
 800057a:	6013      	str	r3, [r2, #0]
				cdY--;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <fsm_automatic_run+0x25c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <fsm_automatic_run+0x25c>)
 8000584:	6013      	str	r3, [r2, #0]
				setTimer2(1000); // Timer 2
 8000586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058a:	f000 fc97 	bl	8000ebc <setTimer2>
			}
			if (isButtonPressed(0)) {
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff fe28 	bl	80001e4 <isButtonPressed>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d06d      	beq.n	8000676 <fsm_automatic_run+0x30e>
			// Check button1_flag == 1, then reset button1_flag = 0
				setTimer4(250);
 800059a:	20fa      	movs	r0, #250	; 0xfa
 800059c:	f000 fcc6 	bl	8000f2c <setTimer4>
				status = MANUAL;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <fsm_automatic_run+0x24c>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 80005a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005aa:	f000 fca3 	bl	8000ef4 <setTimer3>
				clearLed();
 80005ae:	f000 ff8b 	bl	80014c8 <clearLed>
			}
			break;
 80005b2:	e060      	b.n	8000676 <fsm_automatic_run+0x30e>
 80005b4:	2000006c 	.word	0x2000006c
 80005b8:	20000030 	.word	0x20000030
 80005bc:	20000058 	.word	0x20000058
 80005c0:	20000028 	.word	0x20000028
 80005c4:	2000005c 	.word	0x2000005c
 80005c8:	20000070 	.word	0x20000070
 80005cc:	2000002c 	.word	0x2000002c
 80005d0:	20000074 	.word	0x20000074
		case R_Y:
			trafficR_Y();
 80005d4:	f000 fe4c 	bl	8001270 <trafficR_Y>
			if (timer1_flag == 1) {
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <fsm_automatic_run+0x318>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d115      	bne.n	800060c <fsm_automatic_run+0x2a4>
				status = G_R;
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <fsm_automatic_run+0x31c>)
 80005e2:	220b      	movs	r2, #11
 80005e4:	601a      	str	r2, [r3, #0]
				setTimer1(timerGreen * 1000); // Timer 1
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <fsm_automatic_run+0x320>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fc46 	bl	8000e84 <setTimer1>
				cdX = timerGreen - 1;
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <fsm_automatic_run+0x320>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <fsm_automatic_run+0x324>)
 8000600:	6013      	str	r3, [r2, #0]
				cdY = timerRed - 1;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <fsm_automatic_run+0x328>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3b01      	subs	r3, #1
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <fsm_automatic_run+0x32c>)
 800060a:	6013      	str	r3, [r2, #0]
			}
			if (timer2_flag == 1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <fsm_automatic_run+0x330>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d117      	bne.n	8000644 <fsm_automatic_run+0x2dc>
				// UPDATE DISPLAY
				updateClockBuffer2(cdX);
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <fsm_automatic_run+0x324>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fae3 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(cdY);
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <fsm_automatic_run+0x32c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 faba 	bl	8000b9c <updateClockBuffer1>
				cdX--;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <fsm_automatic_run+0x324>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <fsm_automatic_run+0x324>)
 8000630:	6013      	str	r3, [r2, #0]
				cdY--;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <fsm_automatic_run+0x32c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a16      	ldr	r2, [pc, #88]	; (8000694 <fsm_automatic_run+0x32c>)
 800063a:	6013      	str	r3, [r2, #0]
				setTimer2(1000); // Timer 2
 800063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000640:	f000 fc3c 	bl	8000ebc <setTimer2>
			}
			if (isButtonPressed(0)) {
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fdcd 	bl	80001e4 <isButtonPressed>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d014      	beq.n	800067a <fsm_automatic_run+0x312>
			// Check button1_flag == 1, then reset button1_flag = 0
				setTimer4(250);
 8000650:	20fa      	movs	r0, #250	; 0xfa
 8000652:	f000 fc6b 	bl	8000f2c <setTimer4>
				status = MANUAL;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <fsm_automatic_run+0x31c>)
 8000658:	2202      	movs	r2, #2
 800065a:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 800065c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000660:	f000 fc48 	bl	8000ef4 <setTimer3>
				clearLed();
 8000664:	f000 ff30 	bl	80014c8 <clearLed>
			}
			break;
 8000668:	e007      	b.n	800067a <fsm_automatic_run+0x312>
		default:
			break;
 800066a:	bf00      	nop
 800066c:	e006      	b.n	800067c <fsm_automatic_run+0x314>
			break;
 800066e:	bf00      	nop
 8000670:	e004      	b.n	800067c <fsm_automatic_run+0x314>
			break;
 8000672:	bf00      	nop
 8000674:	e002      	b.n	800067c <fsm_automatic_run+0x314>
			break;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <fsm_automatic_run+0x314>
			break;
 800067a:	bf00      	nop
	}
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000070 	.word	0x20000070
 8000684:	2000006c 	.word	0x2000006c
 8000688:	20000030 	.word	0x20000030
 800068c:	20000058 	.word	0x20000058
 8000690:	20000028 	.word	0x20000028
 8000694:	2000005c 	.word	0x2000005c
 8000698:	20000074 	.word	0x20000074

0800069c <fsm_manual_run>:
int mode = 1;
int countRed = 0;
int countYellow = 0;
int countGreen = 0;

void fsm_manual_run() {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	switch(status) {
 80006a0:	4bba      	ldr	r3, [pc, #744]	; (800098c <fsm_manual_run+0x2f0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b02      	subs	r3, #2
 80006a6:	2b15      	cmp	r3, #21
 80006a8:	f200 8164 	bhi.w	8000974 <fsm_manual_run+0x2d8>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_manual_run+0x18>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	0800070d 	.word	0x0800070d
 80006b8:	08000975 	.word	0x08000975
 80006bc:	08000975 	.word	0x08000975
 80006c0:	08000975 	.word	0x08000975
 80006c4:	08000975 	.word	0x08000975
 80006c8:	08000975 	.word	0x08000975
 80006cc:	08000975 	.word	0x08000975
 80006d0:	08000975 	.word	0x08000975
 80006d4:	08000975 	.word	0x08000975
 80006d8:	08000975 	.word	0x08000975
 80006dc:	08000975 	.word	0x08000975
 80006e0:	08000975 	.word	0x08000975
 80006e4:	08000975 	.word	0x08000975
 80006e8:	08000975 	.word	0x08000975
 80006ec:	08000975 	.word	0x08000975
 80006f0:	08000975 	.word	0x08000975
 80006f4:	08000975 	.word	0x08000975
 80006f8:	08000975 	.word	0x08000975
 80006fc:	08000975 	.word	0x08000975
 8000700:	0800077d 	.word	0x0800077d
 8000704:	08000825 	.word	0x08000825
 8000708:	080008cb 	.word	0x080008cb
		case MANUAL:
			updateClockBuffer2(mode);
 800070c:	4ba0      	ldr	r3, [pc, #640]	; (8000990 <fsm_manual_run+0x2f4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa67 	bl	8000be4 <updateClockBuffer2>
			updateClockBuffer1(0);
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fa40 	bl	8000b9c <updateClockBuffer1>
			if (timer4_flag == 1) {
 800071c:	4b9d      	ldr	r3, [pc, #628]	; (8000994 <fsm_manual_run+0x2f8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d105      	bne.n	8000730 <fsm_manual_run+0x94>
				setTimer4(500); // Timer 4
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f000 fc00 	bl	8000f2c <setTimer4>
				LedBlinky(); // Blink 2Hz
 800072c:	f000 feac 	bl	8001488 <LedBlinky>
			}
			if (isButtonPressed(0)) {
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fd57 	bl	80001e4 <isButtonPressed>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 811d 	beq.w	8000978 <fsm_manual_run+0x2dc>
				status = MODE2;
 800073e:	4b93      	ldr	r3, [pc, #588]	; (800098c <fsm_manual_run+0x2f0>)
 8000740:	2215      	movs	r2, #21
 8000742:	601a      	str	r2, [r3, #0]
				mode = 2;
 8000744:	4b92      	ldr	r3, [pc, #584]	; (8000990 <fsm_manual_run+0x2f4>)
 8000746:	2202      	movs	r2, #2
 8000748:	601a      	str	r2, [r3, #0]
				// Save original values
				countRed = timerRed;
 800074a:	4b93      	ldr	r3, [pc, #588]	; (8000998 <fsm_manual_run+0x2fc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a93      	ldr	r2, [pc, #588]	; (800099c <fsm_manual_run+0x300>)
 8000750:	6013      	str	r3, [r2, #0]
				countYellow = timerYellow;
 8000752:	4b93      	ldr	r3, [pc, #588]	; (80009a0 <fsm_manual_run+0x304>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a93      	ldr	r2, [pc, #588]	; (80009a4 <fsm_manual_run+0x308>)
 8000758:	6013      	str	r3, [r2, #0]
				countGreen = timerGreen;
 800075a:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <fsm_manual_run+0x30c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a93      	ldr	r2, [pc, #588]	; (80009ac <fsm_manual_run+0x310>)
 8000760:	6013      	str	r3, [r2, #0]
				updateClockBuffer2(mode);
 8000762:	4b8b      	ldr	r3, [pc, #556]	; (8000990 <fsm_manual_run+0x2f4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fa3c 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(timerRed);
 800076c:	4b8a      	ldr	r3, [pc, #552]	; (8000998 <fsm_manual_run+0x2fc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fa13 	bl	8000b9c <updateClockBuffer1>
				clearLed();
 8000776:	f000 fea7 	bl	80014c8 <clearLed>
			}
			break;
 800077a:	e0fd      	b.n	8000978 <fsm_manual_run+0x2dc>
		case MODE2:
			if (timer4_flag == 1) {
 800077c:	4b85      	ldr	r3, [pc, #532]	; (8000994 <fsm_manual_run+0x2f8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d105      	bne.n	8000790 <fsm_manual_run+0xf4>
				setTimer4(500); // Timer 4
 8000784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000788:	f000 fbd0 	bl	8000f2c <setTimer4>
				RedBlinky(); // Blink 2Hz
 800078c:	f000 fe10 	bl	80013b0 <RedBlinky>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff fd27 	bl	80001e4 <isButtonPressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d021      	beq.n	80007e0 <fsm_manual_run+0x144>
				status = MODE3;
 800079c:	4b7b      	ldr	r3, [pc, #492]	; (800098c <fsm_manual_run+0x2f0>)
 800079e:	2216      	movs	r2, #22
 80007a0:	601a      	str	r2, [r3, #0]
				mode = 3;
 80007a2:	4b7b      	ldr	r3, [pc, #492]	; (8000990 <fsm_manual_run+0x2f4>)
 80007a4:	2203      	movs	r2, #3
 80007a6:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setTimeRED(countRed);
 80007a8:	4b7c      	ldr	r3, [pc, #496]	; (800099c <fsm_manual_run+0x300>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fdd5 	bl	800135c <setTimeRED>
				setTimeYELLOW(countYellow);
 80007b2:	4b7c      	ldr	r3, [pc, #496]	; (80009a4 <fsm_manual_run+0x308>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fdde 	bl	8001378 <setTimeYELLOW>
				setTimeGREEN(countGreen);
 80007bc:	4b7b      	ldr	r3, [pc, #492]	; (80009ac <fsm_manual_run+0x310>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fde7 	bl	8001394 <setTimeGREEN>
				updateClockBuffer2(mode);
 80007c6:	4b72      	ldr	r3, [pc, #456]	; (8000990 <fsm_manual_run+0x2f4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa0a 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(timerYellow);
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <fsm_manual_run+0x304>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9e1 	bl	8000b9c <updateClockBuffer1>
				clearLed();
 80007da:	f000 fe75 	bl	80014c8 <clearLed>
				break;
 80007de:	e0d2      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fcff 	bl	80001e4 <isButtonPressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <fsm_manual_run+0x160>
				updatetimerRed();
 80007ec:	f000 fd66 	bl	80012bc <updatetimerRed>
				updateClockBuffer1(timerRed);
 80007f0:	4b69      	ldr	r3, [pc, #420]	; (8000998 <fsm_manual_run+0x2fc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f9d1 	bl	8000b9c <updateClockBuffer1>
				break;
 80007fa:	e0c4      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff fcf1 	bl	80001e4 <isButtonPressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 80b9 	beq.w	800097c <fsm_manual_run+0x2e0>
				status = MANUAL;
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <fsm_manual_run+0x2f0>)
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 8000810:	f242 7010 	movw	r0, #10000	; 0x2710
 8000814:	f000 fb6e 	bl	8000ef4 <setTimer3>
				clearLed();
 8000818:	f000 fe56 	bl	80014c8 <clearLed>
				mode = 0;
 800081c:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <fsm_manual_run+0x2f4>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
				break;
 8000822:	e0b0      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			break;
		case MODE3:
			if (timer4_flag == 1) {
 8000824:	4b5b      	ldr	r3, [pc, #364]	; (8000994 <fsm_manual_run+0x2f8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d105      	bne.n	8000838 <fsm_manual_run+0x19c>
				setTimer4(500); // Timer 4
 800082c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000830:	f000 fb7c 	bl	8000f2c <setTimer4>
				YellowBlinky(); // Blink 2Hz
 8000834:	f000 fde0 	bl	80013f8 <YellowBlinky>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fcd3 	bl	80001e4 <isButtonPressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d021      	beq.n	8000888 <fsm_manual_run+0x1ec>
				status = MODE4;
 8000844:	4b51      	ldr	r3, [pc, #324]	; (800098c <fsm_manual_run+0x2f0>)
 8000846:	2217      	movs	r2, #23
 8000848:	601a      	str	r2, [r3, #0]
				mode = 4;
 800084a:	4b51      	ldr	r3, [pc, #324]	; (8000990 <fsm_manual_run+0x2f4>)
 800084c:	2204      	movs	r2, #4
 800084e:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setTimeRED(countRed);
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <fsm_manual_run+0x300>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fd81 	bl	800135c <setTimeRED>
				setTimeYELLOW(countYellow);
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <fsm_manual_run+0x308>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fd8a 	bl	8001378 <setTimeYELLOW>
				setTimeGREEN(countGreen);
 8000864:	4b51      	ldr	r3, [pc, #324]	; (80009ac <fsm_manual_run+0x310>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fd93 	bl	8001394 <setTimeGREEN>
				updateClockBuffer2(mode);
 800086e:	4b48      	ldr	r3, [pc, #288]	; (8000990 <fsm_manual_run+0x2f4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f9b6 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(timerGreen);
 8000878:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <fsm_manual_run+0x30c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f98d 	bl	8000b9c <updateClockBuffer1>
				clearLed();
 8000882:	f000 fe21 	bl	80014c8 <clearLed>
				break;
 8000886:	e07e      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fcab 	bl	80001e4 <isButtonPressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d007      	beq.n	80008a4 <fsm_manual_run+0x208>
				updatetimerYellow();
 8000894:	f000 fd42 	bl	800131c <updatetimerYellow>
				updateClockBuffer1(timerYellow);
 8000898:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <fsm_manual_run+0x304>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f97d 	bl	8000b9c <updateClockBuffer1>
				break;
 80008a2:	e070      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fc9d 	bl	80001e4 <isButtonPressed>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d067      	beq.n	8000980 <fsm_manual_run+0x2e4>
				status = MANUAL;
 80008b0:	4b36      	ldr	r3, [pc, #216]	; (800098c <fsm_manual_run+0x2f0>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 80008b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80008ba:	f000 fb1b 	bl	8000ef4 <setTimer3>
				clearLed();
 80008be:	f000 fe03 	bl	80014c8 <clearLed>
				mode = 0;
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <fsm_manual_run+0x2f4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
				break;
 80008c8:	e05d      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			break;
		case MODE4:
			if (timer4_flag == 1) {
 80008ca:	4b32      	ldr	r3, [pc, #200]	; (8000994 <fsm_manual_run+0x2f8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d105      	bne.n	80008de <fsm_manual_run+0x242>
				setTimer4(500); // Timer 4
 80008d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d6:	f000 fb29 	bl	8000f2c <setTimer4>
				GreenBlinky(); // Blink 2Hz
 80008da:	f000 fdb1 	bl	8001440 <GreenBlinky>
			}
			if (isButtonPressed(0)) { // BTN1 pressed, update status and discard value
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fc80 	bl	80001e4 <isButtonPressed>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d023      	beq.n	8000932 <fsm_manual_run+0x296>
				status = MANUAL;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <fsm_manual_run+0x2f0>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 80008f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80008f4:	f000 fafe 	bl	8000ef4 <setTimer3>
				clearLed();
 80008f8:	f000 fde6 	bl	80014c8 <clearLed>
				mode = 0;
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <fsm_manual_run+0x2f4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
				// Adjust Time to the original, not save the updated value
				setTimeRED(countRed);
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <fsm_manual_run+0x300>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fd28 	bl	800135c <setTimeRED>
				setTimeYELLOW(countYellow);
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <fsm_manual_run+0x308>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fd31 	bl	8001378 <setTimeYELLOW>
				setTimeGREEN(countGreen);
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <fsm_manual_run+0x310>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fd3a 	bl	8001394 <setTimeGREEN>
				updateClockBuffer2(mode);
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <fsm_manual_run+0x2f4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f95d 	bl	8000be4 <updateClockBuffer2>
				updateClockBuffer1(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f936 	bl	8000b9c <updateClockBuffer1>
				break;
 8000930:	e029      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			if (isButtonPressed(1)) { // BTN2 pressed, update value
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fc56 	bl	80001e4 <isButtonPressed>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <fsm_manual_run+0x2b2>
				updatetimerGreen();
 800093e:	f000 fcd5 	bl	80012ec <updatetimerGreen>
				updateClockBuffer1(timerGreen);
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <fsm_manual_run+0x30c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f928 	bl	8000b9c <updateClockBuffer1>
				break;
 800094c:	e01b      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			if (isButtonPressed(2)) { // BTN3 pressed, save the value -> update Time
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fc48 	bl	80001e4 <isButtonPressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <fsm_manual_run+0x2e8>
				status = MANUAL;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <fsm_manual_run+0x2f0>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 8000960:	f242 7010 	movw	r0, #10000	; 0x2710
 8000964:	f000 fac6 	bl	8000ef4 <setTimer3>
				clearLed();
 8000968:	f000 fdae 	bl	80014c8 <clearLed>
				mode = 0;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <fsm_manual_run+0x2f4>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
				break;
 8000972:	e008      	b.n	8000986 <fsm_manual_run+0x2ea>
			}
			break;
		default:
			break;
 8000974:	bf00      	nop
 8000976:	e006      	b.n	8000986 <fsm_manual_run+0x2ea>
			break;
 8000978:	bf00      	nop
 800097a:	e004      	b.n	8000986 <fsm_manual_run+0x2ea>
			break;
 800097c:	bf00      	nop
 800097e:	e002      	b.n	8000986 <fsm_manual_run+0x2ea>
			break;
 8000980:	bf00      	nop
 8000982:	e000      	b.n	8000986 <fsm_manual_run+0x2ea>
			break;
 8000984:	bf00      	nop
	}
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000006c 	.word	0x2000006c
 8000990:	20000000 	.word	0x20000000
 8000994:	2000007c 	.word	0x2000007c
 8000998:	20000028 	.word	0x20000028
 800099c:	20000060 	.word	0x20000060
 80009a0:	2000002c 	.word	0x2000002c
 80009a4:	20000064 	.word	0x20000064
 80009a8:	20000030 	.word	0x20000030
 80009ac:	20000068 	.word	0x20000068

080009b0 <fsm_setting_run>:
 *  Created on: Oct 30, 2024
 *      Author: thaik
 */
#include "fsm_setting.h"

void fsm_setting_run() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	switch(status) {
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <fsm_setting_run+0x7c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d01e      	beq.n	80009fa <fsm_setting_run+0x4a>
 80009bc:	2b02      	cmp	r3, #2
 80009be:	dc2e      	bgt.n	8000a1e <fsm_setting_run+0x6e>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <fsm_setting_run+0x1a>
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d004      	beq.n	80009d2 <fsm_setting_run+0x22>
				status = AUTO;
				break;
			}
			break;
		default:
			break;
 80009c8:	e029      	b.n	8000a1e <fsm_setting_run+0x6e>
			if (1) status = AUTO;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <fsm_setting_run+0x7c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
			break;
 80009d0:	e02a      	b.n	8000a28 <fsm_setting_run+0x78>
			if (isButtonPressed(0)) {
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fc06 	bl	80001e4 <isButtonPressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d021      	beq.n	8000a22 <fsm_setting_run+0x72>
				status = MANUAL;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <fsm_setting_run+0x7c>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
				setTimer3(10000); // Timer 3
 80009e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80009e8:	f000 fa84 	bl	8000ef4 <setTimer3>
				setTimer4(500); // Timer 4
 80009ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f0:	f000 fa9c 	bl	8000f2c <setTimer4>
				clearLed();
 80009f4:	f000 fd68 	bl	80014c8 <clearLed>
			break;
 80009f8:	e013      	b.n	8000a22 <fsm_setting_run+0x72>
			if (isButtonPressed(2)) {
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff fbf2 	bl	80001e4 <isButtonPressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <fsm_setting_run+0x5e>
				status = AUTO;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <fsm_setting_run+0x7c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
				break;
 8000a0c:	e00c      	b.n	8000a28 <fsm_setting_run+0x78>
			if (timer3_flag == 1) {
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <fsm_setting_run+0x80>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <fsm_setting_run+0x76>
				status = AUTO;
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <fsm_setting_run+0x7c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
				break;
 8000a1c:	e004      	b.n	8000a28 <fsm_setting_run+0x78>
			break;
 8000a1e:	bf00      	nop
 8000a20:	e002      	b.n	8000a28 <fsm_setting_run+0x78>
			break;
 8000a22:	bf00      	nop
 8000a24:	e000      	b.n	8000a28 <fsm_setting_run+0x78>
			break;
 8000a26:	bf00      	nop
	}
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000006c 	.word	0x2000006c
 8000a30:	20000078 	.word	0x20000078

08000a34 <clear>:
#include "led7_segment.h"
#include "software_timer.h"

int buffer7SEG[4] = {1, 2, 3, 4};
int controllPin7SEG[4] = {EN0_Pin, EN1_Pin, EN2_Pin, EN3_Pin};
void clear() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <clear+0x14>)
 8000a40:	f001 f88f 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40010800 	.word	0x40010800

08000a4c <display7SEG>:

void display7SEG(int num) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	char segNum[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <display7SEG+0x5c>)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	c303      	stmia	r3!, {r0, r1}
 8000a5e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 7; ++i) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e018      	b.n	8000a98 <display7SEG+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 << i, (segNum[num] >> i) & 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	f107 0208 	add.w	r2, r7, #8
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa42 f303 	asr.w	r3, r2, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <display7SEG+0x60>)
 8000a8e:	f001 f868 	bl	8001b62 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; ++i) {
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	dde3      	ble.n	8000a66 <display7SEG+0x1a>
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08002ba4 	.word	0x08002ba4
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <enable>:
void enable(int pin) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, controllPin7SEG[pin], RESET);
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <enable+0x24>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <enable+0x28>)
 8000ac8:	f001 f84b 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000014 	.word	0x20000014
 8000ad8:	40010800 	.word	0x40010800

08000adc <EnableLed>:
void EnableLed() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <EnableLed+0x38>)
 8000ae8:	f001 f83b 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <EnableLed+0x38>)
 8000af4:	f001 f835 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <EnableLed+0x38>)
 8000b00:	f001 f82f 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <EnableLed+0x38>)
 8000b0c:	f001 f829 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40010800 	.word	0x40010800

08000b18 <update7SEG>:

void update7SEG(int index) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	clear();
 8000b20:	f7ff ff88 	bl	8000a34 <clear>
	EnableLed();
 8000b24:	f7ff ffda 	bl	8000adc <EnableLed>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d82e      	bhi.n	8000b8c <update7SEG+0x74>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <update7SEG+0x1c>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b45 	.word	0x08000b45
 8000b38:	08000b57 	.word	0x08000b57
 8000b3c:	08000b69 	.word	0x08000b69
 8000b40:	08000b7b 	.word	0x08000b7b
	switch (index) {
		case 0: {
			display7SEG(buffer7SEG[0]);
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <update7SEG+0x80>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff7f 	bl	8000a4c <display7SEG>
			enable(0);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff ffae 	bl	8000ab0 <enable>
			break;
 8000b54:	e01b      	b.n	8000b8e <update7SEG+0x76>
		}
		case 1: {
			display7SEG(buffer7SEG[1]);
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <update7SEG+0x80>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff76 	bl	8000a4c <display7SEG>
			enable(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ffa5 	bl	8000ab0 <enable>
			break;
 8000b66:	e012      	b.n	8000b8e <update7SEG+0x76>
		}
		case 2: {
			display7SEG(buffer7SEG[2]);
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <update7SEG+0x80>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff6d 	bl	8000a4c <display7SEG>
			enable(2);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff ff9c 	bl	8000ab0 <enable>
			break;
 8000b78:	e009      	b.n	8000b8e <update7SEG+0x76>
		}
		case 3: {
			display7SEG(buffer7SEG[3]);
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <update7SEG+0x80>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff64 	bl	8000a4c <display7SEG>
			enable(3);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f7ff ff93 	bl	8000ab0 <enable>
			break;
 8000b8a:	e000      	b.n	8000b8e <update7SEG+0x76>
		}
		default:
			break;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000004 	.word	0x20000004

08000b9c <updateClockBuffer1>:
void updateClockBuffer1(int value) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	buffer7SEG[0] = value / 10;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <updateClockBuffer1+0x40>)
 8000ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bac:	1092      	asrs	r2, r2, #2
 8000bae:	17db      	asrs	r3, r3, #31
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <updateClockBuffer1+0x44>)
 8000bb4:	6013      	str	r3, [r2, #0]
	buffer7SEG[1] = value % 10;
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <updateClockBuffer1+0x40>)
 8000bba:	fb83 2301 	smull	r2, r3, r3, r1
 8000bbe:	109a      	asrs	r2, r3, #2
 8000bc0:	17cb      	asrs	r3, r1, #31
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	1aca      	subs	r2, r1, r3
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <updateClockBuffer1+0x44>)
 8000bd0:	605a      	str	r2, [r3, #4]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	66666667 	.word	0x66666667
 8000be0:	20000004 	.word	0x20000004

08000be4 <updateClockBuffer2>:
void updateClockBuffer2(int value) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	buffer7SEG[2] = value / 10;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <updateClockBuffer2+0x40>)
 8000bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf4:	1092      	asrs	r2, r2, #2
 8000bf6:	17db      	asrs	r3, r3, #31
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <updateClockBuffer2+0x44>)
 8000bfc:	6093      	str	r3, [r2, #8]
	buffer7SEG[3] = value % 10;
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <updateClockBuffer2+0x40>)
 8000c02:	fb83 2301 	smull	r2, r3, r3, r1
 8000c06:	109a      	asrs	r2, r3, #2
 8000c08:	17cb      	asrs	r3, r1, #31
 8000c0a:	1ad2      	subs	r2, r2, r3
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	1aca      	subs	r2, r1, r3
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <updateClockBuffer2+0x44>)
 8000c18:	60da      	str	r2, [r3, #12]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	66666667 	.word	0x66666667
 8000c28:	20000004 	.word	0x20000004

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f000 fc95 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f82b 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000c3a:	f000 f865 	bl	8000d08 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000c3e:	f000 f8af 	bl	8000da0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <main+0x5c>)
 8000c44:	f001 fbea 	bl	800241c <HAL_TIM_Base_Start_IT>
  initButton();
 8000c48:	f7ff fa80 	bl	800014c <initButton>
  //setTimer5(2000);
  /* USER CODE END 2 */
  setTimer5(250);
 8000c4c:	20fa      	movs	r0, #250	; 0xfa
 8000c4e:	f000 f989 	bl	8000f64 <setTimer5>
  int i=0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 8000c56:	f7ff fb87 	bl	8000368 <fsm_automatic_run>
	  fsm_manual_run();
 8000c5a:	f7ff fd1f 	bl	800069c <fsm_manual_run>
	  fsm_setting_run();
 8000c5e:	f7ff fea7 	bl	80009b0 <fsm_setting_run>

	  if(timer5_flag == 1) {
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <main+0x60>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d1f5      	bne.n	8000c56 <main+0x2a>
	  		update7SEG(i++);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff51 	bl	8000b18 <update7SEG>
	  		setTimer5(100);
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f000 f974 	bl	8000f64 <setTimer5>
	  		if (i >= 4){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	dde9      	ble.n	8000c56 <main+0x2a>
	  			i = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
	  fsm_automatic_run();
 8000c86:	e7e6      	b.n	8000c56 <main+0x2a>
 8000c88:	200001d8 	.word	0x200001d8
 8000c8c:	20000080 	.word	0x20000080

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	; 0x40
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 ff6c 	bl	8002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ff7c 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cd2:	f000 f8d1 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 f9e8 	bl	80020c4 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f8bd 	bl	8000e78 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3740      	adds	r7, #64	; 0x40
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d2e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d3c:	2209      	movs	r2, #9
 8000d3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d4e:	f001 fb15 	bl	800237c <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d58:	f000 f88e 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d6a:	f001 fc93 	bl	8002694 <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d74:	f000 f880 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d86:	f001 fe6b 	bl	8002a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f872 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200001d8 	.word	0x200001d8

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_GPIO_Init+0xb4>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000de4:	2200      	movs	r2, #0
 8000de6:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8000dea:	481b      	ldr	r0, [pc, #108]	; (8000e58 <MX_GPIO_Init+0xb8>)
 8000dec:	f000 feb9 	bl	8001b62 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|DOT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	217f      	movs	r1, #127	; 0x7f
 8000df4:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_GPIO_Init+0xbc>)
 8000df6:	f000 feb4 	bl	8001b62 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SELECT_Pin MODIFY_Pin SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|MODIFY_Pin|SET_Pin;
 8000dfa:	230e      	movs	r3, #14
 8000dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_GPIO_Init+0xb8>)
 8000e0e:	f000 fd17 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin DOT_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000e12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e16:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|DOT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2302      	movs	r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_GPIO_Init+0xb8>)
 8000e2c:	f000 fd08 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000e30:	237f      	movs	r3, #127	; 0x7f
 8000e32:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_GPIO_Init+0xbc>)
 8000e48:	f000 fcfa 	bl	8001840 <HAL_GPIO_Init>

}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	timer_Run();
 8000e68:	f000 f898 	bl	8000f9c <timer_Run>
	getKeyInput();
 8000e6c:	f7ff f9d4 	bl	8000218 <getKeyInput>

}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <setTimer1>:
int timer2_counter = 0;
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

void setTimer1(int duration) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  timer1_counter = duration / TIMER_CYCLE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <setTimer1+0x2c>)
 8000e90:	fb82 1203 	smull	r1, r2, r2, r3
 8000e94:	1092      	asrs	r2, r2, #2
 8000e96:	17db      	asrs	r3, r3, #31
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <setTimer1+0x30>)
 8000e9c:	6013      	str	r3, [r2, #0]
  timer1_flag = 0;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <setTimer1+0x34>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667
 8000eb4:	20000084 	.word	0x20000084
 8000eb8:	20000070 	.word	0x20000070

08000ebc <setTimer2>:
void setTimer2(int duration) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  timer2_counter = duration / TIMER_CYCLE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <setTimer2+0x2c>)
 8000ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ecc:	1092      	asrs	r2, r2, #2
 8000ece:	17db      	asrs	r3, r3, #31
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <setTimer2+0x30>)
 8000ed4:	6013      	str	r3, [r2, #0]
  timer2_flag = 0;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <setTimer2+0x34>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	66666667 	.word	0x66666667
 8000eec:	20000088 	.word	0x20000088
 8000ef0:	20000074 	.word	0x20000074

08000ef4 <setTimer3>:
void setTimer3(int duration) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  timer3_counter = duration / TIMER_CYCLE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <setTimer3+0x2c>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1092      	asrs	r2, r2, #2
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <setTimer3+0x30>)
 8000f0c:	6013      	str	r3, [r2, #0]
  timer3_flag = 0;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <setTimer3+0x34>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	66666667 	.word	0x66666667
 8000f24:	2000008c 	.word	0x2000008c
 8000f28:	20000078 	.word	0x20000078

08000f2c <setTimer4>:
void setTimer4(int duration) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  timer4_counter = duration / TIMER_CYCLE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <setTimer4+0x2c>)
 8000f38:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3c:	1092      	asrs	r2, r2, #2
 8000f3e:	17db      	asrs	r3, r3, #31
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <setTimer4+0x30>)
 8000f44:	6013      	str	r3, [r2, #0]
  timer4_flag = 0;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <setTimer4+0x34>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	66666667 	.word	0x66666667
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	2000007c 	.word	0x2000007c

08000f64 <setTimer5>:
void setTimer5(int duration) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  timer5_counter = duration / TIMER_CYCLE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <setTimer5+0x2c>)
 8000f70:	fb82 1203 	smull	r1, r2, r2, r3
 8000f74:	1092      	asrs	r2, r2, #2
 8000f76:	17db      	asrs	r3, r3, #31
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <setTimer5+0x30>)
 8000f7c:	6013      	str	r3, [r2, #0]
  timer5_flag = 0;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <setTimer5+0x34>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	66666667 	.word	0x66666667
 8000f94:	20000094 	.word	0x20000094
 8000f98:	20000080 	.word	0x20000080

08000f9c <timer_Run>:
void timer_Run(){
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <timer_Run+0xac>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dd0b      	ble.n	8000fc0 <timer_Run+0x24>
		timer1_counter--;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <timer_Run+0xac>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a26      	ldr	r2, [pc, #152]	; (8001048 <timer_Run+0xac>)
 8000fb0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <timer_Run+0xac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <timer_Run+0x24>
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <timer_Run+0xb0>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <timer_Run+0xb4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dd0b      	ble.n	8000fe0 <timer_Run+0x44>
		timer2_counter--;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <timer_Run+0xb4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a20      	ldr	r2, [pc, #128]	; (8001050 <timer_Run+0xb4>)
 8000fd0:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <timer_Run+0xb4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <timer_Run+0x44>
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <timer_Run+0xb8>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <timer_Run+0xbc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dd0b      	ble.n	8001000 <timer_Run+0x64>
		timer3_counter--;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <timer_Run+0xbc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <timer_Run+0xbc>)
 8000ff0:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <timer_Run+0xbc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <timer_Run+0x64>
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <timer_Run+0xc0>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter > 0){
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <timer_Run+0xc4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd0b      	ble.n	8001020 <timer_Run+0x84>
		timer4_counter--;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <timer_Run+0xc4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <timer_Run+0xc4>)
 8001010:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0) timer4_flag = 1;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <timer_Run+0xc4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <timer_Run+0x84>
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <timer_Run+0xc8>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	}
	if(timer5_counter > 0){
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <timer_Run+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd0b      	ble.n	8001040 <timer_Run+0xa4>
		timer5_counter--;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <timer_Run+0xcc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <timer_Run+0xcc>)
 8001030:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0) timer5_flag = 1;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <timer_Run+0xcc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <timer_Run+0xa4>
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <timer_Run+0xd0>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
	}
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	20000084 	.word	0x20000084
 800104c:	20000070 	.word	0x20000070
 8001050:	20000088 	.word	0x20000088
 8001054:	20000074 	.word	0x20000074
 8001058:	2000008c 	.word	0x2000008c
 800105c:	20000078 	.word	0x20000078
 8001060:	20000090 	.word	0x20000090
 8001064:	2000007c 	.word	0x2000007c
 8001068:	20000094 	.word	0x20000094
 800106c:	20000080 	.word	0x20000080

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_MspInit+0x5c>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_MspInit+0x5c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x5c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x5c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_MspInit+0x60>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_MspInit+0x60>)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000

080010d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d113      	bne.n	800110e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_TIM_Base_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	201c      	movs	r0, #28
 8001104:	f000 fb65 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001108:	201c      	movs	r0, #28
 800110a:	f000 fb7e 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001162:	f000 fa43 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM2_IRQHandler+0x10>)
 8001172:	f001 f99f 	bl	80024b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001d8 	.word	0x200001d8

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <trafficG_R>:

int timerRed = 5;
int timerYellow = 2;
int timerGreen = 3;

void trafficG_R() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 		GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <trafficG_R+0x48>)
 8001196:	f000 fce4 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <trafficG_R+0x48>)
 80011a2:	f000 fcde 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <trafficG_R+0x48>)
 80011ae:	f000 fcd8 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2110      	movs	r1, #16
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <trafficG_R+0x48>)
 80011b8:	f000 fcd3 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2120      	movs	r1, #32
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <trafficG_R+0x48>)
 80011c2:	f000 fcce 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2140      	movs	r1, #64	; 0x40
 80011ca:	4802      	ldr	r0, [pc, #8]	; (80011d4 <trafficG_R+0x48>)
 80011cc:	f000 fcc9 	bl	8001b62 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010800 	.word	0x40010800

080011d8 <trafficY_R>:
void trafficY_R() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 		GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	480f      	ldr	r0, [pc, #60]	; (8001220 <trafficY_R+0x48>)
 80011e2:	f000 fcbe 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <trafficY_R+0x48>)
 80011ee:	f000 fcb8 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <trafficY_R+0x48>)
 80011fa:	f000 fcb2 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2110      	movs	r1, #16
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <trafficY_R+0x48>)
 8001204:	f000 fcad 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2120      	movs	r1, #32
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <trafficY_R+0x48>)
 800120e:	f000 fca8 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <trafficY_R+0x48>)
 8001218:	f000 fca3 	bl	8001b62 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010800 	.word	0x40010800

08001224 <trafficR_G>:
void trafficR_G() {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 		GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	480f      	ldr	r0, [pc, #60]	; (800126c <trafficR_G+0x48>)
 800122e:	f000 fc98 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <trafficR_G+0x48>)
 800123a:	f000 fc92 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <trafficR_G+0x48>)
 8001246:	f000 fc8c 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2110      	movs	r1, #16
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <trafficR_G+0x48>)
 8001250:	f000 fc87 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2120      	movs	r1, #32
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <trafficR_G+0x48>)
 800125a:	f000 fc82 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2140      	movs	r1, #64	; 0x40
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <trafficR_G+0x48>)
 8001264:	f000 fc7d 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <trafficR_Y>:
void trafficR_Y() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 		GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <trafficR_Y+0x48>)
 800127a:	f000 fc72 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <trafficR_Y+0x48>)
 8001286:	f000 fc6c 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <trafficR_Y+0x48>)
 8001292:	f000 fc66 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2110      	movs	r1, #16
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <trafficR_Y+0x48>)
 800129c:	f000 fc61 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2120      	movs	r1, #32
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <trafficR_Y+0x48>)
 80012a6:	f000 fc5c 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2140      	movs	r1, #64	; 0x40
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <trafficR_Y+0x48>)
 80012b0:	f000 fc57 	bl	8001b62 <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010800 	.word	0x40010800

080012bc <updatetimerRed>:
//	if(timerYellow < 99 && timerYellow < timerGreen) {
//		timerYellow++;
//		timerRed++;
//	}
//}
void updatetimerRed() {
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	if (timerRed < 99) {
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <updatetimerRed+0x28>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b62      	cmp	r3, #98	; 0x62
 80012c6:	dc09      	bgt.n	80012dc <updatetimerRed+0x20>
		timerRed++;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <updatetimerRed+0x28>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <updatetimerRed+0x28>)
 80012d0:	6013      	str	r3, [r2, #0]
		timerGreen++;
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <updatetimerRed+0x2c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <updatetimerRed+0x2c>)
 80012da:	6013      	str	r3, [r2, #0]
	}
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000028 	.word	0x20000028
 80012e8:	20000030 	.word	0x20000030

080012ec <updatetimerGreen>:
void updatetimerGreen() {
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	if (timerRed < 99) {
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <updatetimerGreen+0x28>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b62      	cmp	r3, #98	; 0x62
 80012f6:	dc09      	bgt.n	800130c <updatetimerGreen+0x20>
		timerGreen++;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <updatetimerGreen+0x2c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <updatetimerGreen+0x2c>)
 8001300:	6013      	str	r3, [r2, #0]
		timerRed++;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <updatetimerGreen+0x28>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <updatetimerGreen+0x28>)
 800130a:	6013      	str	r3, [r2, #0]
	}
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000028 	.word	0x20000028
 8001318:	20000030 	.word	0x20000030

0800131c <updatetimerYellow>:
void updatetimerYellow() {
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	if (timerRed < 99 && timerYellow < timerGreen) {
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <updatetimerYellow+0x34>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b62      	cmp	r3, #98	; 0x62
 8001326:	dc0f      	bgt.n	8001348 <updatetimerYellow+0x2c>
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <updatetimerYellow+0x38>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <updatetimerYellow+0x3c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	da09      	bge.n	8001348 <updatetimerYellow+0x2c>
		timerYellow++;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <updatetimerYellow+0x38>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <updatetimerYellow+0x38>)
 800133c:	6013      	str	r3, [r2, #0]
		timerRed++;
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <updatetimerYellow+0x34>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a02      	ldr	r2, [pc, #8]	; (8001350 <updatetimerYellow+0x34>)
 8001346:	6013      	str	r3, [r2, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000028 	.word	0x20000028
 8001354:	2000002c 	.word	0x2000002c
 8001358:	20000030 	.word	0x20000030

0800135c <setTimeRED>:

void setTimeRED(int countRed) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	timerRed = countRed;
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <setTimeRED+0x18>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000028 	.word	0x20000028

08001378 <setTimeYELLOW>:
void setTimeYELLOW(int countYellow) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	timerYellow = countYellow;
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <setTimeYELLOW+0x18>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	2000002c 	.word	0x2000002c

08001394 <setTimeGREEN>:
void setTimeGREEN(int countGreen) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	timerGreen = countGreen;
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <setTimeGREEN+0x18>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000030 	.word	0x20000030

080013b0 <RedBlinky>:
void RedBlinky() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80013b4:	2110      	movs	r1, #16
 80013b6:	480f      	ldr	r0, [pc, #60]	; (80013f4 <RedBlinky+0x44>)
 80013b8:	f000 fbeb 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <RedBlinky+0x44>)
 80013c0:	f000 fbe7 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <RedBlinky+0x44>)
 80013ca:	f000 fbca 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <RedBlinky+0x44>)
 80013d6:	f000 fbc4 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <RedBlinky+0x44>)
 80013e0:	f000 fbbf 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <RedBlinky+0x44>)
 80013ec:	f000 fbb9 	bl	8001b62 <HAL_GPIO_WritePin>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010800 	.word	0x40010800

080013f8 <YellowBlinky>:
void YellowBlinky() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	480e      	ldr	r0, [pc, #56]	; (800143c <YellowBlinky+0x44>)
 8001402:	f000 fbae 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,			RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <YellowBlinky+0x44>)
 800140c:	f000 fba9 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <YellowBlinky+0x44>)
 8001416:	f000 fba4 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001420:	4806      	ldr	r0, [pc, #24]	; (800143c <YellowBlinky+0x44>)
 8001422:	f000 fb9e 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001426:	2120      	movs	r1, #32
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <YellowBlinky+0x44>)
 800142a:	f000 fbb2 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 800142e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001432:	4802      	ldr	r0, [pc, #8]	; (800143c <YellowBlinky+0x44>)
 8001434:	f000 fbad 	bl	8001b92 <HAL_GPIO_TogglePin>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010800 	.word	0x40010800

08001440 <GreenBlinky>:
void GreenBlinky() {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	480e      	ldr	r0, [pc, #56]	; (8001484 <GreenBlinky+0x44>)
 800144a:	f000 fb8a 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 		RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <GreenBlinky+0x44>)
 8001454:	f000 fb85 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <GreenBlinky+0x44>)
 800145c:	f000 fb99 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <GreenBlinky+0x44>)
 8001466:	f000 fb94 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <GreenBlinky+0x44>)
 8001470:	f000 fb77 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <GreenBlinky+0x44>)
 800147c:	f000 fb71 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010800 	.word	0x40010800

08001488 <LedBlinky>:
void LedBlinky() {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800148c:	2110      	movs	r1, #16
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <LedBlinky+0x3c>)
 8001490:	f000 fb7f 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <LedBlinky+0x3c>)
 8001498:	f000 fb7b 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <LedBlinky+0x3c>)
 80014a0:	f000 fb77 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80014a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <LedBlinky+0x3c>)
 80014aa:	f000 fb72 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80014ae:	2120      	movs	r1, #32
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <LedBlinky+0x3c>)
 80014b2:	f000 fb6e 	bl	8001b92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80014b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <LedBlinky+0x3c>)
 80014bc:	f000 fb69 	bl	8001b92 <HAL_GPIO_TogglePin>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40010800 	.word	0x40010800

080014c8 <clearLed>:
void clearLed() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 		RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <clearLed+0x48>)
 80014d2:	f000 fb46 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 	RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <clearLed+0x48>)
 80014de:	f000 fb40 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 	RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <clearLed+0x48>)
 80014ea:	f000 fb3a 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 		RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2110      	movs	r1, #16
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <clearLed+0x48>)
 80014f4:	f000 fb35 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 	RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2120      	movs	r1, #32
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <clearLed+0x48>)
 80014fe:	f000 fb30 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 	RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <clearLed+0x48>)
 8001508:	f000 fb2b 	bl	8001b62 <HAL_GPIO_WritePin>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40010800 	.word	0x40010800

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff fe34 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151a:	490c      	ldr	r1, [pc, #48]	; (800154c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001530:	4c09      	ldr	r4, [pc, #36]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f001 faf9 	bl	8002b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fb73 	bl	8000c2c <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001550:	08002bdc 	.word	0x08002bdc
  ldr r2, =_sbss
 8001554:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001558:	20000224 	.word	0x20000224

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f923 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fd78 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f93b 	bl	8001826 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f903 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000024 	.word	0x20000024
 80015e4:	20000038 	.word	0x20000038
 80015e8:	20000034 	.word	0x20000034

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000038 	.word	0x20000038
 800160c:	20000220 	.word	0x20000220

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000220 	.word	0x20000220

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <__NVIC_EnableIRQ+0x34>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff90 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff2d 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff42 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff35 	bl	8001688 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e148      	b.n	8001ae6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001854:	2201      	movs	r2, #1
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8137 	bne.w	8001ae0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4aa3      	ldr	r2, [pc, #652]	; (8001b04 <HAL_GPIO_Init+0x2c4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d05e      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 800187c:	4aa1      	ldr	r2, [pc, #644]	; (8001b04 <HAL_GPIO_Init+0x2c4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d875      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 8001882:	4aa1      	ldr	r2, [pc, #644]	; (8001b08 <HAL_GPIO_Init+0x2c8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d058      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001888:	4a9f      	ldr	r2, [pc, #636]	; (8001b08 <HAL_GPIO_Init+0x2c8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d86f      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800188e:	4a9f      	ldr	r2, [pc, #636]	; (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d052      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001894:	4a9d      	ldr	r2, [pc, #628]	; (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d869      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800189a:	4a9d      	ldr	r2, [pc, #628]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04c      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018a0:	4a9b      	ldr	r2, [pc, #620]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d863      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018a6:	4a9b      	ldr	r2, [pc, #620]	; (8001b14 <HAL_GPIO_Init+0x2d4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d046      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018ac:	4a99      	ldr	r2, [pc, #612]	; (8001b14 <HAL_GPIO_Init+0x2d4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d85d      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d82a      	bhi.n	800190c <HAL_GPIO_Init+0xcc>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d859      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_GPIO_Init+0x80>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001927 	.word	0x08001927
 80018cc:	08001969 	.word	0x08001969
 80018d0:	0800196f 	.word	0x0800196f
 80018d4:	0800196f 	.word	0x0800196f
 80018d8:	0800196f 	.word	0x0800196f
 80018dc:	0800196f 	.word	0x0800196f
 80018e0:	0800196f 	.word	0x0800196f
 80018e4:	0800196f 	.word	0x0800196f
 80018e8:	0800196f 	.word	0x0800196f
 80018ec:	0800196f 	.word	0x0800196f
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	0800196f 	.word	0x0800196f
 80018fc:	0800196f 	.word	0x0800196f
 8001900:	0800196f 	.word	0x0800196f
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001931 	.word	0x08001931
 800190c:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <HAL_GPIO_Init+0x2d8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001912:	e02c      	b.n	800196e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e029      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e024      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	3308      	adds	r3, #8
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e01f      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	330c      	adds	r3, #12
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e01a      	b.n	8001970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001942:	2304      	movs	r3, #4
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e013      	b.n	8001970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	611a      	str	r2, [r3, #16]
          break;
 800195a:	e009      	b.n	8001970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	615a      	str	r2, [r3, #20]
          break;
 8001966:	e003      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x130>
          break;
 800196e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d801      	bhi.n	800197a <HAL_GPIO_Init+0x13a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	e001      	b.n	800197e <HAL_GPIO_Init+0x13e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d802      	bhi.n	800198c <HAL_GPIO_Init+0x14c>
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x152>
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3b08      	subs	r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	210f      	movs	r1, #15
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8090 	beq.w	8001ae0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d8:	4a51      	ldr	r2, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x2e0>)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1e0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1dc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a47      	ldr	r2, [pc, #284]	; (8001b2c <HAL_GPIO_Init+0x2ec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1d8>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1e2>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1e2>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1e2>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	493b      	ldr	r1, [pc, #236]	; (8001b20 <HAL_GPIO_Init+0x2e0>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4933      	ldr	r1, [pc, #204]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	492d      	ldr	r1, [pc, #180]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4929      	ldr	r1, [pc, #164]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4923      	ldr	r1, [pc, #140]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	491f      	ldr	r1, [pc, #124]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4919      	ldr	r1, [pc, #100]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4915      	ldr	r1, [pc, #84]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f aeaf 	bne.w	8001854 <HAL_GPIO_Init+0x14>
  }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	372c      	adds	r7, #44	; 0x2c
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	10320000 	.word	0x10320000
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	10220000 	.word	0x10220000
 8001b10:	10210000 	.word	0x10210000
 8001b14:	10120000 	.word	0x10120000
 8001b18:	10110000 	.word	0x10110000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b72:	787b      	ldrb	r3, [r7, #1]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba4:	887a      	ldrh	r2, [r7, #2]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e26c      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be4:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d00c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d112      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5e>
 8001bfc:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c08:	d10b      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0a:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d06c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x12c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d168      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e246      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x76>
 8001c2c:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a7f      	ldr	r2, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e02e      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b7b      	ldr	r3, [pc, #492]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7a      	ldr	r2, [pc, #488]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a77      	ldr	r2, [pc, #476]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xbc>
 8001c66:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a71      	ldr	r2, [pc, #452]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6e      	ldr	r2, [pc, #440]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c80:	4b6b      	ldr	r3, [pc, #428]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a67      	ldr	r2, [pc, #412]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fcb6 	bl	8001610 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fcb2 	bl	8001610 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1fa      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe4>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fca2 	bl	8001610 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fc9e 	bl	8001610 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1e6      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x10c>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d11c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x18c>
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1ba      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4939      	ldr	r1, [pc, #228]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	e03a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fc57 	bl	8001610 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff fc53 	bl	8001610 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e19b      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4927      	ldr	r1, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fc36 	bl	8001610 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff fc32 	bl	8001610 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e17a      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d03a      	beq.n	8001e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7ff fc16 	bl	8001610 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fc12 	bl	8001610 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e15a      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 fa9a 	bl	8002340 <RCC_Delay>
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7ff fbfc 	bl	8001610 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1a:	e00f      	b.n	8001e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fbf8 	bl	8001610 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d908      	bls.n	8001e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e140      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	42420000 	.word	0x42420000
 8001e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b9e      	ldr	r3, [pc, #632]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e9      	bne.n	8001e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a6 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b97      	ldr	r3, [pc, #604]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b94      	ldr	r3, [pc, #592]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a93      	ldr	r2, [pc, #588]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b8e      	ldr	r3, [pc, #568]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a8a      	ldr	r2, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fbb9 	bl	8001610 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7ff fbb5 	bl	8001610 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0fd      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x312>
 8001ec8:	4b7b      	ldr	r3, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a7a      	ldr	r2, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x334>
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	e01c      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x356>
 8001f00:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a6c      	ldr	r2, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d015      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fb69 	bl	8001610 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fb65 	bl	8001610 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0ab      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RCC_OscConfig+0x37e>
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7ff fb53 	bl	8001610 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff fb4f 	bl	8001610 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e095      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8081 	beq.w	80020ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d061      	beq.n	800207c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d146      	bne.n	800204e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_OscConfig+0x4fc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fb23 	bl	8001610 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff fb1f 	bl	8001610 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e067      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	492d      	ldr	r1, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a19      	ldr	r1, [r3, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	430b      	orrs	r3, r1
 800201a:	4927      	ldr	r1, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x4fc>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7ff faf3 	bl	8001610 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff faef 	bl	8001610 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e037      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x46a>
 800204c:	e02f      	b.n	80020ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_RCC_OscConfig+0x4fc>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fadc 	bl	8001610 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fad8 	bl	8001610 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e020      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x498>
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e013      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42420060 	.word	0x42420060

080020c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d0      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d910      	bls.n	8002108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4965      	ldr	r1, [pc, #404]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0b8      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800212a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	494d      	ldr	r1, [pc, #308]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d040      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d115      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e073      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06b      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4936      	ldr	r1, [pc, #216]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b4:	f7ff fa2c 	bl	8001610 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7ff fa28 	bl	8001610 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e053      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d210      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e032      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4916      	ldr	r1, [pc, #88]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002252:	f000 f821 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490a      	ldr	r1, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1cc>)
 800226c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1d0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f98a 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000
 8002288:	40021000 	.word	0x40021000
 800228c:	08002bb0 	.word	0x08002bb0
 8002290:	20000024 	.word	0x20000024
 8002294:	20000034 	.word	0x20000034

08002298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_GetSysClockFreq+0x94>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x30>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x36>
 80022c6:	e027      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ca:	613b      	str	r3, [r7, #16]
      break;
 80022cc:	e027      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0c9b      	lsrs	r3, r3, #18
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_GetSysClockFreq+0x94>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0c5b      	lsrs	r3, r3, #17
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fa:	fb02 f203 	mul.w	r2, r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e004      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HAL_RCC_GetSysClockFreq+0xa4>)
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	613b      	str	r3, [r7, #16]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	693b      	ldr	r3, [r7, #16]
}
 8002320:	4618      	mov	r0, r3
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	007a1200 	.word	0x007a1200
 8002334:	08002bc0 	.word	0x08002bc0
 8002338:	08002bd0 	.word	0x08002bd0
 800233c:	003d0900 	.word	0x003d0900

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000024 	.word	0x20000024
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e041      	b.n	8002412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fe96 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f000 fa56 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e035      	b.n	80024a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_Base_Start_IT+0x90>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x4e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d004      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x4e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d111      	bne.n	800248e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b06      	cmp	r3, #6
 800247a:	d010      	beq.n	800249e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248c:	e007      	b.n	800249e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d020      	beq.n	8002518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f998 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f98b 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f99a 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0204 	mvn.w	r2, #4
 8002534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f972 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f965 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f974 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f94c 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f93f 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f94e 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0210 	mvn.w	r2, #16
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2208      	movs	r2, #8
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f926 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f919 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f928 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0201 	mvn.w	r2, #1
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fc20 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa6f 	bl	8002b22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8f8 	bl	8002858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0220 	mvn.w	r2, #32
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa42 	bl	8002b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_TIM_ConfigClockSource+0x1c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e0b4      	b.n	800281a <HAL_TIM_ConfigClockSource+0x186>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e8:	d03e      	beq.n	8002768 <HAL_TIM_ConfigClockSource+0xd4>
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ee:	f200 8087 	bhi.w	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f6:	f000 8086 	beq.w	8002806 <HAL_TIM_ConfigClockSource+0x172>
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fe:	d87f      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b70      	cmp	r3, #112	; 0x70
 8002702:	d01a      	beq.n	800273a <HAL_TIM_ConfigClockSource+0xa6>
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d87b      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b60      	cmp	r3, #96	; 0x60
 800270a:	d050      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x11a>
 800270c:	2b60      	cmp	r3, #96	; 0x60
 800270e:	d877      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b50      	cmp	r3, #80	; 0x50
 8002712:	d03c      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xfa>
 8002714:	2b50      	cmp	r3, #80	; 0x50
 8002716:	d873      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d058      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x13a>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d86f      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b30      	cmp	r3, #48	; 0x30
 8002722:	d064      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d86b      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b20      	cmp	r3, #32
 800272a:	d060      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d867      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05c      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d05a      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	e062      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6899      	ldr	r1, [r3, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f000 f96a 	bl	8002a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800275c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
      break;
 8002766:	e04f      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f000 f953 	bl	8002a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278a:	609a      	str	r2, [r3, #8]
      break;
 800278c:	e03c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 f8ca 	bl	8002934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2150      	movs	r1, #80	; 0x50
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f921 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027ac:	e02c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8e8 	bl	8002990 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2160      	movs	r1, #96	; 0x60
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f911 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027cc:	e01c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8aa 	bl	8002934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2140      	movs	r1, #64	; 0x40
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f901 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027ec:	e00c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f000 f8f8 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027fe:	e003      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e000      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
	...

0800286c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a2b      	ldr	r2, [pc, #172]	; (800292c <TIM_Base_SetConfig+0xc0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x28>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x28>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <TIM_Base_SetConfig+0xc4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d108      	bne.n	80028a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <TIM_Base_SetConfig+0xc0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <TIM_Base_SetConfig+0x52>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d003      	beq.n	80028be <TIM_Base_SetConfig+0x52>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <TIM_Base_SetConfig+0xc4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d108      	bne.n	80028d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0d      	ldr	r2, [pc, #52]	; (800292c <TIM_Base_SetConfig+0xc0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f023 0201 	bic.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]
  }
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400

08002934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f023 0201 	bic.w	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f023 030a 	bic.w	r3, r3, #10
 8002970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f023 0210 	bic.w	r2, r3, #16
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	031b      	lsls	r3, r3, #12
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f043 0307 	orr.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	021a      	lsls	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	609a      	str	r2, [r3, #8]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e041      	b.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10c      	bne.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400

08002b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <__libc_init_array>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	2600      	movs	r6, #0
 8002b38:	4d0c      	ldr	r5, [pc, #48]	; (8002b6c <__libc_init_array+0x38>)
 8002b3a:	4c0d      	ldr	r4, [pc, #52]	; (8002b70 <__libc_init_array+0x3c>)
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	42a6      	cmp	r6, r4
 8002b42:	d109      	bne.n	8002b58 <__libc_init_array+0x24>
 8002b44:	f000 f822 	bl	8002b8c <_init>
 8002b48:	2600      	movs	r6, #0
 8002b4a:	4d0a      	ldr	r5, [pc, #40]	; (8002b74 <__libc_init_array+0x40>)
 8002b4c:	4c0a      	ldr	r4, [pc, #40]	; (8002b78 <__libc_init_array+0x44>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	42a6      	cmp	r6, r4
 8002b54:	d105      	bne.n	8002b62 <__libc_init_array+0x2e>
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5c:	4798      	blx	r3
 8002b5e:	3601      	adds	r6, #1
 8002b60:	e7ee      	b.n	8002b40 <__libc_init_array+0xc>
 8002b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b66:	4798      	blx	r3
 8002b68:	3601      	adds	r6, #1
 8002b6a:	e7f2      	b.n	8002b52 <__libc_init_array+0x1e>
 8002b6c:	08002bd4 	.word	0x08002bd4
 8002b70:	08002bd4 	.word	0x08002bd4
 8002b74:	08002bd4 	.word	0x08002bd4
 8002b78:	08002bd8 	.word	0x08002bd8

08002b7c <memset>:
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4402      	add	r2, r0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d100      	bne.n	8002b86 <memset+0xa>
 8002b84:	4770      	bx	lr
 8002b86:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8a:	e7f9      	b.n	8002b80 <memset+0x4>

08002b8c <_init>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr

08002b98 <_fini>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr
